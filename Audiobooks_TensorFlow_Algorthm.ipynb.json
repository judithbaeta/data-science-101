{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Business Case Example: An Audiobooks Platform"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create the Machine Learning algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "npz = np.load('Audiobooks_data_train.npz')\n",
    "\n",
    "# Recall we saved the .npz in 2-tuple form[inputs, targets]\n",
    "train_inputs = npz['inputs'].astype(np.float) # We expect all inputs to be floats\n",
    "# np.ndarray.astype() creates a copy of the array, cast to a specific type\n",
    "train_targets = npz['targets'].astype(np.int) # We expect targets to be 1s and 0s\n",
    "\n",
    "npz = np.load('Audiobooks_data_validation.npz')\n",
    "validation_inputs, validation_targets = npz['inputs'].astype(np.float), npz['targets'].astype(np.int)\n",
    "\n",
    "npz = np.load('Audiobooks_data_test.npz')\n",
    "test_inputs, test_targets = npz['inputs'].astype(np.float), npz['targets'].astype(np.int)\n",
    "\n",
    "# Our train, validation and test datasets are in array form"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model\n",
    "\n",
    "Outline, optimizers, loss, early stopping and training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "36/36 - 0s - loss: 0.5499 - accuracy: 0.7346 - val_loss: 0.4297 - val_accuracy: 0.8680\n",
      "Epoch 2/100\n",
      "36/36 - 0s - loss: 0.3591 - accuracy: 0.8818 - val_loss: 0.3191 - val_accuracy: 0.8770\n",
      "Epoch 3/100\n",
      "36/36 - 0s - loss: 0.3045 - accuracy: 0.8871 - val_loss: 0.2972 - val_accuracy: 0.8881\n",
      "Epoch 4/100\n",
      "36/36 - 0s - loss: 0.2884 - accuracy: 0.8935 - val_loss: 0.2840 - val_accuracy: 0.8881\n",
      "Epoch 5/100\n",
      "36/36 - 0s - loss: 0.2755 - accuracy: 0.8989 - val_loss: 0.2828 - val_accuracy: 0.8859\n",
      "Epoch 6/100\n",
      "36/36 - 0s - loss: 0.2669 - accuracy: 0.8994 - val_loss: 0.2752 - val_accuracy: 0.8881\n",
      "Epoch 7/100\n",
      "36/36 - 0s - loss: 0.2602 - accuracy: 0.9033 - val_loss: 0.2684 - val_accuracy: 0.8971\n",
      "Epoch 8/100\n",
      "36/36 - 0s - loss: 0.2587 - accuracy: 0.9039 - val_loss: 0.2666 - val_accuracy: 0.8949\n",
      "Epoch 9/100\n",
      "36/36 - 0s - loss: 0.2541 - accuracy: 0.9053 - val_loss: 0.2682 - val_accuracy: 0.8881\n",
      "Epoch 10/100\n",
      "36/36 - 0s - loss: 0.2487 - accuracy: 0.9072 - val_loss: 0.2655 - val_accuracy: 0.8904\n",
      "Epoch 11/100\n",
      "36/36 - 0s - loss: 0.2458 - accuracy: 0.9064 - val_loss: 0.2655 - val_accuracy: 0.8904\n",
      "Epoch 12/100\n",
      "36/36 - 0s - loss: 0.2464 - accuracy: 0.9084 - val_loss: 0.2580 - val_accuracy: 0.8971\n",
      "Epoch 13/100\n",
      "36/36 - 0s - loss: 0.2405 - accuracy: 0.9089 - val_loss: 0.2593 - val_accuracy: 0.9060\n",
      "Epoch 14/100\n",
      "36/36 - 0s - loss: 0.2385 - accuracy: 0.9106 - val_loss: 0.2577 - val_accuracy: 0.8971\n",
      "Epoch 15/100\n",
      "36/36 - 0s - loss: 0.2385 - accuracy: 0.9100 - val_loss: 0.2523 - val_accuracy: 0.9060\n",
      "Epoch 16/100\n",
      "36/36 - 0s - loss: 0.2390 - accuracy: 0.9100 - val_loss: 0.2544 - val_accuracy: 0.8993\n",
      "Epoch 17/100\n",
      "36/36 - 0s - loss: 0.2352 - accuracy: 0.9103 - val_loss: 0.2474 - val_accuracy: 0.9016\n",
      "Epoch 18/100\n",
      "36/36 - 0s - loss: 0.2331 - accuracy: 0.9125 - val_loss: 0.2567 - val_accuracy: 0.8971\n",
      "Epoch 19/100\n",
      "36/36 - 0s - loss: 0.2324 - accuracy: 0.9128 - val_loss: 0.2555 - val_accuracy: 0.8993\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x640134d90>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_size = 10\n",
    "output_size = 2\n",
    "hidden_layer_size = 50\n",
    "\n",
    "model = tf.keras.Sequential([\n",
    "                            tf.keras.layers.Dense(hidden_layer_size, activation='relu'), #1st hidden layer\n",
    "                            tf.keras.layers.Dense(hidden_layer_size, activation='relu'), #2nd hidden layer\n",
    "                            tf.keras.layers.Dense(output_size, activation ='softmax') #output layeer is a classyfier thus should be activated by softmax \n",
    "                            ])\n",
    "\n",
    "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
    "# loss='sparse_categorical_crossentropy' applies one-hot encoding to the targets\n",
    "\n",
    "batch_size = 100\n",
    "\n",
    "max_epochs = 100\n",
    "\n",
    "early_stopping = tf.keras.callbacks.EarlyStopping(patience=2)\n",
    "# 'patience' lets us decide how many consecutive increases we can tolerate\n",
    "# It's a bit strict to not have any tolerance at all\n",
    "\n",
    "model.fit(train_inputs,\n",
    "         train_targets,\n",
    "         batch_size = batch_size,\n",
    "         epochs = max_epochs,\n",
    "         callbacks = [early_stopping],\n",
    "         validation_data = (validation_inputs, validation_targets),\n",
    "         verbose=2)\n",
    "\n",
    "# we need to implement an early stopping mechanism to prevent overfitting\n",
    "# Callbacks: utilities called at certain points during the model training\n",
    "# class EarlyStopping: Stop training when a monitored quantity has stopped improving"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Result\n",
    "\n",
    "Our ML algorithm learnt to classify about 90% of our customers correctly.\n",
    "\n",
    "If we were given 10 customers and their audiobooka activity, we will be able to correctly identify future customer behaviour of 9 of them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14/14 [==============================] - 0s 2ms/step - loss: 0.2558 - accuracy: 0.8996\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_accuracy = model.evaluate(test_inputs, test_targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Test loss: 0.26. Test accuracy: 89.96%\n"
     ]
    }
   ],
   "source": [
    "print('\\nTest loss: {0:.2f}. Test accuracy: {1:.2f}%'.format(test_loss, test_accuracy*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py3-TF2.0]",
   "language": "python",
   "name": "conda-env-py3-TF2.0-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
