{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Business Case Example: An Audiobooks Platform"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preprocessing\n",
    "\n",
    "1. Balance the dataset\n",
    "2. Split the dataset into Trainign, Validation, Test\n",
    "3. Save the new datasets into a tensor friendly format .npz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extract the data from the csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# We'll use sklearn capabilities for standardizing the inputs\n",
    "from sklearn import preprocessing\n",
    "\n",
    "raw_csv_data = np.loadtxt('Audiobooks_data.csv', delimiter = ',')\n",
    "# We create a new variable that takes as inputs all the variables excluding the IDs and targets,\n",
    "# so, the zeroth column and the last one (or minus first)\n",
    "unscaled_inputs_all = raw_csv_data[:,1:-1]\n",
    "# we record the targets in a separete variable using the same method\n",
    "targets_all = raw_csv_data[:,-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shuffle the data\n",
    "\n",
    "It's possible that the original data was collected in order of date. Since we'll be batching, we must shuffle the data.\n",
    "\n",
    "Imagine a batch corresponds to a day worth of purchases, inside the batch the data is homogeneous, but between the batched it is very heterogeneous due to promotions, day-of-the-week effect, etc.\n",
    "\n",
    "This will confuse the SGD when we average the loss across batches (we update weigths after each batch)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "shuffled_indices = np.arange(unscaled_inputs_all.shape[0])\n",
    "np.random.shuffle(shuffled_indices)\n",
    "\n",
    "# Use the shuffled indices to shuffle the inputs and targets.\n",
    "unscaled_inputs_all = unscaled_inputs_all[shuffled_indices]\n",
    "targets_all = targets_all[shuffled_indices]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Balance the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We'll count the number of targets that are 1s\n",
    "# if we sum all the tragets we´ll know the number of targets that are 1s\n",
    "num_one_targets = int(np.sum(targets_all))\n",
    "\n",
    "# Then, we´ll keep as many 0s as 1s and delete the others:\n",
    "zero_targets_counter = 0 # we set a counter for zero targets that we set to zero\n",
    "indices_to_remove = [] # we need a variable that records the indices to remove.\n",
    "                        # For now it is empty, but we want to create a list or a tuple\n",
    "\n",
    "# Iterate over the dataset and balance it:\n",
    "for i in range(targets_all.shape[0]): # the shape of targets_all on axis=0, is basically the length of the vector which will show us the number of all targets\n",
    "    if targets_all[i]==0: \n",
    "        zero_targets_counter += 1 # we want to increase the zeroes counter by 1 if the target is 0\n",
    "        if zero_targets_counter > num_one_targets:\n",
    "            indices_to_remove.append(i)\n",
    "            # If the target at position i is 0, and the number of zeroes is bigger than the numbe rof 1s, we want to take ote of that index\n",
    "            # If the target at position i is 0, and the number of zeroes is bigger than the number of 1s, I'll know the indices of all data point to be removed \n",
    "            # deleting these entries will balance the dataset\n",
    "        \n",
    "unscaled_inputs_equal_priors = np.delete(unscaled_inputs_all, indices_to_remove, axis = 0) #np.delete(array, obj to delete, axis)\n",
    "targets_equal_priors = np.delete(targets_all, indices_to_remove, axis = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standardize the inputs\n",
    "\n",
    "Scaling the inputs will greatly improve the algorithm (about 10%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using the preprocessing library we imported from sklearn\n",
    "scaled_inputs = preprocessing.scale(unscaled_inputs_equal_priors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shuffle the data (again)\n",
    "\n",
    "We still have to shuffle them AFTER we balance the dataset as otherwise, all targets that are 1s will be contained in the train_targets. This code might be suboptimal, but is the easiest way to complete the exercise. Still, as we do the preprocessing only once, speed in not something we are aiming for."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "shuffled_indices = np.arange(scaled_inputs.shape[0])\n",
    "np.random.shuffle(shuffled_indices)\n",
    "\n",
    "shuffled_inputs = scaled_inputs[shuffled_indices]\n",
    "shuffled_targets = targets_equal_priors[shuffled_indices]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split the dataset into training, validation and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "samples_count = shuffled_inputs.shape[0]\n",
    "\n",
    "# To determine the size of each sample we'll use the 80-10-10 split for train, validation, and test\n",
    "train_samples_count = int(0.8*samples_count)\n",
    "validation_samples_count = int(0.1*samples_count)\n",
    "test_samples_count = samples_count - train_samples_count - validation_samples_count\n",
    "\n",
    "train_inputs = shuffled_inputs[:train_samples_count]\n",
    "train_targets = shuffled_targets[:train_samples_count]\n",
    "\n",
    "validation_inputs = shuffled_inputs[train_samples_count:train_samples_count+validation_samples_count]\n",
    "validation_targets = shuffled_targets[train_samples_count:train_samples_count+validation_samples_count]\n",
    "\n",
    "test_inputs = shuffled_inputs[train_samples_count+validation_samples_count:]\n",
    "test_targets = shuffled_targets[train_samples_count+validation_samples_count:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Dataset: Tragets 1s: 1787.0 Num. samples: 3579 Balance% 0.4993014808605756\n",
      "Validation Dataset: Tragets 1s: 215.0 Num. samples: 447 Balance % 0.4809843400447427\n",
      "Test Dataset: Tragets 1s: 235.0 Num. samples: 448 Balance % 0.5245535714285714\n"
     ]
    }
   ],
   "source": [
    "# Lets's check if the datasets are balanced\n",
    "\n",
    "print('Train Dataset:','Tragets 1s:', np.sum(train_targets),'Num. samples:', train_samples_count,'Balance%', np.sum(train_targets) / train_samples_count)\n",
    "print('Validation Dataset:', 'Tragets 1s:', np.sum(validation_targets), 'Num. samples:', validation_samples_count,'Balance %', np.sum(validation_targets) / validation_samples_count)\n",
    "print('Test Dataset:','Tragets 1s:', np.sum(test_targets),'Num. samples:', test_samples_count, 'Balance %', np.sum(test_targets) / test_samples_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save three datasets in *.npz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We save the .npz in 2-tuple form[inputs, targets]\n",
    "np.savez('Audiobooks_data_train', inputs=train_inputs, targets= train_targets)\n",
    "np.savez('Audiobooks_data_validation', inputs=validation_inputs, targets=validation_targets)\n",
    "np.savez('Audiobooks_data_test', inputs=test_inputs, targets= test_targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py3-TF2.0]",
   "language": "python",
   "name": "conda-env-py3-TF2.0-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
